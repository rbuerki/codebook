{
    "snippets": [
        {
            "name": "imports_basic",
            "code": [
                "import sys",
                "import typing",
                "from datetime import datetime",
                "from pathlib import Path",
                "",
                "import numpy as np",
                "import pandas as pd",
                "import plotly.express as px",
                "# import plotly.graph_objects as go",
                "import plotly.io as pio",
                "import matplotlib.pyplot as plt",
                "import seaborn as sns",
                "",
                "from codebook import clean, EDA, style"
            ]
        },
        {
            "name": "imports_extra",
            "code": [
                "# Misc",
                "from pprint import pprint",
                "from rich import inspect",
                "from tqdm.notebook import tqdm"
            ]
        },
        {
            "name": "config_stuff",
            "code": [
                "%load_ext autoreload",
                "%autoreload 2",
                "",
                "%matplotlib inline",
                "plt.style.use('raph-base')",
                "",
                "from IPython.core.interactiveshell import InteractiveShell",
                "InteractiveShell.ast_node_interactivity = 'all'",
                "",
                "pd.options.display.float_format = '{:,.2f}'.format",
                "pd.set_option('display.max_columns', 30)",
                "pd.set_option('display.expand_frame_repr', False)",
                "pd.set_option('max_colwidth', 800)",
                "",
                "pio.templates.default = 'simple_white'",
                "px.defaults.color_continuous_scale = style.plasma_long",
                "px.defaults.color_discrete_sequence = style.purple_yellow_grey_long",
                "px.defaults.width = 1000",
                "px.defaults.height = 500",
                "",
                "np.random.seed(666)"
            ]
        },
        {
            "name": "executable_versions",
            "code": [
                "print(sys.executable)",
                "print(sys.version)",
                "print(f'Pandas {pd.__version__}')"
            ]
        },
        {
            "name": "extend_sys_path",
            "code": [
                "sys.path.append(str(Path.cwd().parent / 'src'))"
            ]
        },
        {
            "name": "save_and_load_pd_to_parquet",
            "code": [
                "filename = '0_data_clean.parquet'",
                "rel_path = 'data'",
                "keep_index = False",
                "",
                "# Save to parquet file",
                "if not Path(rel_path).exists():",
                "    Path(rel_path).mkdir()",
                "data_clean.to_parquet(Path(rel_path) / filename, index=keep_index)",
                "",
                "# Load from parquet file",
                "data_raw = pd.read_parquet(Path(rel_path) / filename)"
            ]
        },
        {
            "name": "altert_boxes_markdown",
            "code": [
                "<div class='alert alert-block alert-info'>",
                "<b>Note:</b> Blue boxes for tips and notes.",
                "</div>",
                "",
                "<div class='alert alert-block alert-warning'>",
                "<b>Warning:</b> Alert users to enter or update, validate input variables.",
                "</div>",
                "",
                "<div class='alert alert-block alert-danger'>",
                "<b>Danger:</b> Alert users to not delete some important part of code etc.",
                "</div>"
            ]
        },
        {
            "name": "connect_to_server_create_engine",
            "code": [
                "# Connect to server, create engine",
                "",
                "from sqlalchemy import create_engine",
                "",
                "SERVER = 'BI-TES-DB001'",
                "DB_NAME = 'RPT'",
                "",
                "def connect_to_db(server, db_name):",
                "    con_str = f'mssql+pyodbc://@{server}/{db_name}?driver=SQL Server Native Client 11.0'",
                "    engine = create_engine(con_str, fast_executemany=True)",
                "    return engine",
                "",
                "engine = connect_to_db(SERVER, DB_NAME)"
            ]
        },
        {
            "name": "load_from_query_(example)",
            "code": [
                "# Load data from query",
                "",
                "N_MONTHS_BACK = '36'",
                "placeholder = '@n_months_back'",
                "",
                "with open(",
                "    'sql_statements/some_query.sql', 'r',",
                "    encoding='utf-8-sig'",
                ") as file:",
                "    query = file.read()",
                "query = query.replace(placeholder, N_MONTHS_BACK)",
                "",
                "data_raw = pd.read_sql(query, engine)"
            ]
        },
        {
            "name": "create_small_test_dataframe",
            "code": [
                "# Create small test dataframe",
                "",
                "import pandas.util.testing",
                "df_test = pandas.util.testing.makeMixedDataFrame()",
                "df_test['A'] = df_test['A'].astype(int)"
            ]
        }
    ]
}